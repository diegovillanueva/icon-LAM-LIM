#! /bin/ksh
#=============================================================================

# mistral cpu batch job parameters
# --------------------------------
#SBATCH --account=bb1143
#SBATCH --job-name=exp.icon_lam_1dom_EURECHA_1d.run
#SBATCH --partition=compute2,compute
#SBATCH --chdir=/mnt/lustre02/work/bb1114/b380602/icon-build/run
#SBATCH --nodes=20
#SBATCH --threads-per-core=2
# the following is needed to work around a bug that otherwise leads to
# a too low number of ranks when using compute,compute2 as queue
#SBATCH --mem=0
#SBATCH --output=/mnt/lustre02/work/bb1114/b380602/icon-build/run/LOG.exp.icon_lam_1dom_EURECHA_1d.run.%j.o
#SBATCH --error=/mnt/lustre02/work/bb1114/b380602/icon-build/run/LOG.exp.icon_lam_1dom_EURECHA_1d.run.%j.o
#SBATCH --exclusive
#SBATCH --time=08:00:00

#=============================================================================
set -x
ulimit -s unlimited
#=============================================================================
#
# ICON run script:
# !ATTENTION! Do not change the format of the following lines.
#             They are evaluated by checksuite scripts.
# created by ./run/make_target_runscript
# target machine is bullx_cpu
# target use_compiler is intel
# with_mpi=yes
# with_openmp=yes
# memory_model=large
# submit with sbatch
#
#=============================================================================
#
# OpenMP environment variables
# ----------------------------
export OMP_NUM_THREADS=$((${SLURM_JOB_CPUS_PER_NODE%%\(*} / 6 / 2))
export ICON_THREADS=$((${SLURM_JOB_CPUS_PER_NODE%%\(*} / 6 / 2))
export OMP_SCHEDULE=dynamic,1
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=200M
#
# MPI variables
# -------------
no_of_nodes=${SLURM_JOB_NUM_NODES:=1}
mpi_procs_pernode=$((${SLURM_JOB_CPUS_PER_NODE%%\(*} / 2 / OMP_NUM_THREADS))
((mpi_total_procs=no_of_nodes * mpi_procs_pernode))
#
# blocking length
# ---------------
nproma=16
#
#=============================================================================

# load local setting, if existing
# -------------------------------
if [ -a ../setting ]
then
  echo "Load Setting"
  . ../setting
fi

# environment variables for the experiment and the target system
# --------------------------------------------------------------
export EXPNAME="icon_lam_1dom_EURECHA_1d"
export KMP_AFFINITY="verbose,granularity=core,compact,1,1"
export KMP_LIBRARY="turnaround"
export KMP_KMP_SETTINGS="1"
export OMP_WAIT_POLICY="active"
export OMPI_MCA_pml="cm"
export OMPI_MCA_mtl="mxm"
export OMPI_MCA_coll="^fca"
export MXM_RDMA_PORTS="mlx5_0:1"
export HCOLL_MAIN_IB="mlx5_0:1"
export HCOLL_ML_DISABLE_BARRIER="1"
export HCOLL_ML_DISABLE_IBARRIER="1"
export HCOLL_ML_DISABLE_BCAST="1"
export HCOLL_ENABLE_MCAST_ALL="1"
export HCOLL_ENABLE_MCAST="1"
export OMPI_MCA_coll_sync_barrier_after_alltoallv="1"
export OMPI_MCA_coll_sync_barrier_after_alltoallw="1"
export MXM_HANDLE_ERRORS="bt"
export UCX_HANDLE_ERRORS="bt"
export MALLOC_TRIM_THRESHOLD_="-1"
export KMP_AFFINITY="verbose,granularity=core,compact,1,1"
export KMP_LIBRARY="turnaround"
export KMP_KMP_SETTINGS="1"
export OMP_WAIT_POLICY="active"
export OMPI_MCA_pml="cm"
export OMPI_MCA_mtl="mxm"
export OMPI_MCA_coll="^fca"
export MXM_RDMA_PORTS="mlx5_0:1"
export HCOLL_MAIN_IB="mlx5_0:1"
export HCOLL_ML_DISABLE_BARRIER="1"
export HCOLL_ML_DISABLE_IBARRIER="1"
export HCOLL_ML_DISABLE_BCAST="0"
export HCOLL_ENABLE_MCAST_ALL="1"
export HCOLL_ENABLE_MCAST="1"
export OMPI_MCA_coll_sync_barrier_after_alltoallv="1"
export OMPI_MCA_coll_sync_barrier_after_alltoallw="1"
export MXM_HANDLE_ERRORS="bt"
export UCX_HANDLE_ERRORS="bt"
# load profile
# ------------
if [[ -a  /etc/profile ]]
then
	. /etc/profile
fi

#=============================================================================

# directories with absolute paths
# -------------------------------
thisdir=$(pwd)
basedir=${thisdir%/*}
export basedir
icon_data_rootFolder="/pool/data/ICON"

# how to start the icon model
# ---------------------------
export START="srun --cpu-freq=HighM1 --kill-on-bad-exit=1 --nodes=${SLURM_JOB_NUM_NODES:-1} --cpu_bind=verbose,cores --distribution=block:block --ntasks=$((no_of_nodes * mpi_procs_pernode)) --ntasks-per-node=${mpi_procs_pernode} --cpus-per-task=$((2 * OMP_NUM_THREADS)) --propagate=STACK,CORE"
export MODEL="${basedir}/bin/icon"

# how to submit the next job
# --------------------------
submit="sbatch"
job_name="exp.icon_lam_1dom_EURECHA_1d.run"

# cdo for post-processing
# -----------------------
cdo="cdo"
cdo_diff="cdo diffn"

# constants for time calculations
# -------------------------------
second=1                                 # [s] 1 second
minute=60                                # [s] 1 minute
hour=3600                                # [s] 1 hour
day=86400                                # [s] 1 day
month=2592000                            # [s] 30 days
year360=31104000                         # [s] 360 days
year=31556900                            # [s] 1 earth year

# define script functions used in the experiment run script
# ---------------------------------------------------------
. ./add_run_routines

#=============================================================================

ulimit -s 2097152
ulimit -c 0

#=============================================================================
#
# This section of the run script containes the specifications of the experiment.
# The specifications are passed by namelist to the program.
# For a complete list see Namelist_overview.pdf
#
# EXPNAME and NPROMA must be defined in as environment variables or must 
# they must be substituted with appropriate values.
#
# DWD, 2010-08-31
#
#-----------------------------------------------------------------------------
#
# Basic specifications of the simulation
# --------------------------------------
#
# These variables are set in the header section of the completed run script:
#
# EXPNAME = experiment name
# NPROMA  = array blocking length / inner loop length
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
# The following information is included to present some information on the buildbot-html main page
#
# _bb_table_Description_  Jablonowski Williamson steady-state test
# _bb_table_Model_        non-hydrost. atmosph.
# _bb_table_Grid_         triangle
#-----------------------------------------------------------------------------
# The following values must be set here as shell variables so that they can be used
# also in the executing section of the completed run script
#
#-----------------------------------------------------------------------------
# the namelist filename
atmo_namelist=NAMELIST_${EXPNAME}
#
#-----------------------------------------------------------------------------
# global timing
start_date="2020-01-21T12:00:00Z" 
end_date="2020-01-29T12:00:00Z" 
ndays_restart=60
ndays_restart=1 # 6 hours with 20 nodes and 1km (dom04) , dt=2.5 s for EURECHA
dt_restart=`expr ${ndays_restart} \* 86400`
init_date=`echo ${start_date%%:*} | sed 's/\-//g' | sed 's/T//g'`
#
#-----------------------------------------------------------------------------
# model timing
dtime=15    # 10 seconds is ~ valid for 1km grid spacing, see ICON Tutorial p. 84
dtime=80    # CFL exceeded in dom 3 and 4
#dtime=40    # CFL exceeded in dom 3
#dtime=20    # CFL exceeded in dom 3
dt_checkpoint=`expr 30 \* 3600 `  # write restart file every 30 hours - hence disabled
dt_checkpoint=`expr 6 \* 3600 `  # write restart file every 6 hours - hence disabled
#
#-----------------------------------------------------------------------------
# model parameters
atmo_model_equations=3 # equation system
#                     1=hydrost. atm. (T dynamics)
#                     2=hydrost. atm. (theta dynamics)
#                     3=non-hydrost. atm.,
#                    -1=shallow water model
#                    -2=hydrost. ocean
nlev=50           # nlev = number of full levels
iforcing=3        # 3 for inwp forcing; 0 for no forcing
#
#-----------------------------------------------------------------------------
# the grid and other files
#
export EXERCISE_DIR=/pf/b/b380352/work/bb1224/2021_MS-COURSE/

# absolute path to directory with LAM data
LAMDATA=${EXERCISE_DIR}/data/icon-lem
#
#grids_folder=${LAMDATA}/"grids-extpar/lpz_r2"
#grid_1="lpz_r2_dom01_DOM01"
#grid_2="lpz_r2_dom02_DOM02"
grids_folder="/work/bb1114/b380602/icon-build/cloud-tracking-initial-data/EURECHA/"
grid_1="domain1_DOM01" #about 10 km
grid_2="domain2_DOM02"
grid_3="domain3_DOM03"
grid_4="domain4_DOM04" #about 1.25


atmo_dyn_grids="${grid_1}.nc  ${grid_2}.nc ${grid_3}.nc ${grid_4}.nc" 
dynamics_parent_grid_id="0,   1,   2,   3"

atmo_dyn_grids="${grid_1}.nc  ${grid_2}.nc"
dynamics_parent_grid_id="0,   1"

#atmo_dyn_grids="${grid_1}.nc"
#dynamics_parent_grid_id="0"


#
#LATBC PATH
#LATBC_PATH=$LAMDATA/"bc-init/lpz_r2/"
LATBC_PATH="/work/bb1114/b380602/icon-build/cloud-tracking-initial-data/DWD_web_fabian_emulation/remap_bc/OUTDIR/"
LATBC_PATH="/work/bb1114/b380602/icon-build/cloud-tracking-initial-data/EURECHA/bc/"
#
#EXT DATA
ext_data_path=${grids_folder}  #### TODO need to be changes in sens experiments
extpar_suffix="external_parameter_icon"
add_link_file $ext_data_path/${extpar_suffix}_${grid_1}_tiles.nc  extpar_${grid_1}.nc
add_link_file $ext_data_path/${extpar_suffix}_${grid_2}_tiles.nc  extpar_${grid_2}.nc
add_link_file $ext_data_path/${extpar_suffix}_${grid_3}_tiles.nc  extpar_${grid_3}.nc
add_link_file $ext_data_path/${extpar_suffix}_${grid_4}_tiles.nc  extpar_${grid_4}.nc



#INITIAL DATA, e.g. init_lpz_r2_dom01_DOM01_ecmwf-ana-global-2021051600.nc
init_data_path="/work/bb1114/b380602/icon-build/cloud-tracking-initial-data/EURECHA/init/init_ana_20200121_T12.nc"
#add_link_file $init_data_path ifs2icon_R2B09_DOM01.nc
#add_link_file $init_data_path dwdFG_R2B09_DOM01.nc
add_link_file $init_data_path ifs2icon_R2B08_DOM01.nc
add_link_file $init_data_path dwdFG_R2B08_DOM01.nc
#
#-----------------------------------------------------------------------------
#
# write ICON namelist parameters
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf
#

#-----------------------------------------------------------------------------
#
# write ICON namelist parameters
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf
#
# ------------------------
# reconstrcuct the grid parameters in namelist form
dynamics_grid_filename=""
for gridfile in ${atmo_dyn_grids}; do
  dynamics_grid_filename="${dynamics_grid_filename} '${gridfile}',"
done
dynamics_parent_grid_id="${dynamics_parent_grid_id},"
#
cat > ${atmo_namelist} << EOF
!
&parallel_nml
 nproma         = ${nproma}
 p_test_run     = .false.
 l_test_openmp  = .false.
 l_log_checks   = .false.
 num_io_procs                 = 2
 num_prefetch_proc            = 1
/
&grid_nml
 ! cell_type is not used = 3            ! triangular cells
 dynamics_grid_filename = ${dynamics_grid_filename}
 dynamics_parent_grid_id = ${dynamics_parent_grid_id}
 lredgrid_phys     = .false.
 lfeedback         = .false.
 l_limited_area    = .true.
 start_time        = 0., 60., 120., 180.
/ 
&initicon_nml
 init_mode              =  2 !4=cosmo, 2=ifs, 3=combined
! ana_varnames_map_file  = '$basedir/run/ana_varnames_map_file.txt'
 nlevsoil_in            =  4
 lread_ana              = .false.
/
&run_nml
 num_lev     = ${nlev},      ! number of full levels of vertical grid
 dtime       = ${dtime}     ! [s] timestep in seconds
 ldynamics   = .TRUE.       ! dynamics
 ltestcase   = .FALSE.      ! testcase
 ltransport  = .TRUE.       ! transport
 iforcing    = ${iforcing}  !
 ltimer      = .true.       ! 
 timers_level = 10          !
 msg_level   = 12           ! detailed report during integration
 output      = 'nml','totint'      
/
&dynamics_nml
 iequations  = ${atmo_model_equations}       ! 1: hydrost. atmosphere
 lcoriolis   = .TRUE.
 idiv_method     = 1
 divavg_cntrwgt  = 0.50
/
&limarea_nml
 itype_latbc     = 1
 dtime_latbc     = 21600.   ! six hours ! 3600, 7200, 10800, 14400, 18000, 21600 , 
 nlev_latbc      = 137
 latbc_path      = '${LATBC_PATH}'
 !latbc_filename  = 'latbc_bc-grid-${grid_1}.grid_ecmwf-fc-ce-<y><m><d>-0_<h>.nc'  !e.g. latbc_bc-grid-lpz_r2_dom01_DOM01.grid_ecmwf-fc-ce-20210516-0_00.nc
 !latbc_filename  = 'ecmwf-fc-ce-<y><m><d>-0_<h>_lbc.nc'
 latbc_filename  = 'ana_<y><m><d>_T<h>_lbc.nc'
 !latbc_boundary_grid    =  '${grids_folder}/bc-grid-${grid_1}.grid.nc'
 latbc_boundary_grid    =  '/work/bb1114/b380602/icon-build/cloud-tracking-initial-data/EURECHA/bc/lateral_boundary.grid.nc'
 latbc_varnames_map_file = '$basedir/run/dict.latbc'
/
&nwp_phy_nml
 inwp_gscp                   =                          4         ! cloud microphysics and precipitation
 inwp_convection             =                          1         ! convection
 lshallowconv_only           =                      .TRUE.        ! only shallow convection
 inwp_radiation              =                          1         ! radiation
 inwp_cldcover               =                          1         ! cloud cover scheme for radiation
 inwp_turb                   =                          1         ! vertical diffusion and transfer
 inwp_satad                  =                          1         ! saturation adjustment
 inwp_sso                    =                          1         ! subgrid scale orographic drag
 inwp_gwd                    =                          0         ! non-orographic gravity wave drag
 inwp_surface                =                          1         ! surface scheme
 latm_above_top              =                      .TRUE.        ! take into account atmosphere above model top for radiation computation
 ldetrain_conv_prec          =                      .TRUE.
 efdt_min_raylfric           =                       7200.        ! minimum e-folding time of Rayleigh friction
 itype_z0                    =                          2         ! type of roughness length data
 icapdcycl                   =                          3         ! apply CAPE modification to improve diurnalcycle over tropical land
 icpl_aero_conv              =                          1         ! coupling between autoconversion and Tegen aerosol climatology
 ! icpl_aero_gscp              =                          1         ! coupling between autoconversion and Tegen aerosol climatology
 icpl_o3_tp                  =                          1
 lrtm_filename               =                'rrtmg_lw.nc'       ! longwave absorption coefficients for RRTM_LW
 ! cldopt_filename             =             'rrtm_cldopt.nc'       ! RRTM cloud optical properties
 mu_rain                     =                         0.5        ! shap parameter in gamma distribution for rain
 rain_n0_factor              =                         0.1        ! tuning factor for intercept parameter of raindrop size distr.
 dt_rad                      =                         720.       ! time step for radiation in s
 dt_conv                     =                         120.       ! time step for convection in s (domain specific)
 dt_sso                      =                         120.       ! time step for SSO parameterization
 dt_gwd                      =                         120.       ! time step for gravity wave drag parameterization
/
&nwp_tuning_nml
 itune_albedo                =                          1         ! reduced albedo (w.r.t. MODIS data) over Sahara
 tune_gkwake                 =                        0.25
 tune_gfrcrit                =                        0.333
 tune_gkdrag                 =                        0.0
 tune_minsnowfrac            =                        0.3
 tune_box_liq_asy            =                        3.5
 tune_gust_factor            =                        7.25
 tune_sgsclifac              =                        1.0
 tune_zceff_min = 0.075
/
! radiation_nml: radiation scheme ---------------------------------------------
&radiation_nml
 irad_o3                     =                         79         ! ozone climatology
 irad_aero                   =                          6         ! aerosols
 islope_rad                  =                          0         ! Slope correction for surface radiation
 albedo_type                 =                          2         ! type of surface albedo
 vmr_co2                     =                    390.e-06
 vmr_ch4                     =                   1800.e-09
 vmr_n2o                     =                   322.0e-09
 vmr_o2                      =                     0.20946
 vmr_cfc11                   =                    240.e-12
 vmr_cfc12                   =                    532.e-12
/

! sleve_nml: vertical level specification -------------------------------------
&sleve_nml
 min_lay_thckn               =                         20.0       ! layer thickness of lowermost layer
 top_height                  =                      22000.0       ! height of model top
 stretch_fac                 =                          0.65      ! stretching factor to vary distribution of model levels
 decay_scale_1               =                       4000.0       ! decay scale of large-scale topography component
 decay_scale_2               =                       2500.0       ! decay scale of small-scale topography component
 decay_exp                   =                          1.2       ! exponent of decay function
 flat_height                 =                      16000.0       ! height above which the coordinate surfaces are flat
/

! transport_nml: tracer transport ---------------------------------------------
&transport_nml
 ivadv_tracer                =           3, 3, 3, 3, 3, 3         ! tracer specific method to compute vertical advection
 itype_hlimit                =           3, 4, 4, 4, 4, 4         ! type of limiter for horizontal transport
 ihadv_tracer                =          52, 2, 2, 2, 2, 2         ! tracer specific method to compute horizontal advection
 llsq_svd                    =                      .TRUE.        ! use SV decomposition for least squares design matrix
/

! turbdiff_nml: turbulent diffusion -------------------------------------------
&turbdiff_nml
 tkhmin                      =                          0.5       ! scaling factor for minimum vertical diffusion coefficient
 tkmmin                      =                          0.75      ! scaling factor for minimum vertical diffusion coefficient
 pat_len                     =                        750.0       ! effective length scale of thermal surface patterns
 tur_len                     =                        300.0       ! asymptotic maximal turbulent distance
 rat_sea                     =                          7.0       ! controls laminar resistance for sea surface
 frcsmot                     =                          0.2       ! these 2 switches together apply vertical smoothing of the TKE source terms
 imode_frcsmot               =                            2       ! in the tropics (only), which reduces the moist bias in the tropical lower troposphere
 imode_tkesso                =                            2       ! mode of calculating th SSO source term for TKE production
 itype_sher                  =                            2       ! type of shear forcing used in turbulence
 ltkeshs                     =                        .TRUE.      ! include correction term for coarse grids in hor. shear production term
 ltkesso                     =                        .TRUE.      ! consider TKE-production by sub-grid SSO wakes
 a_hshr                      =                          2.0       ! length scale factor for separated horizontal shear mode
 icldm_turb                  =                            2       ! mode of cloud water representation in turbulence
 q_crit                      =                          2.0       ! critical value for normalized supersaturation
/

&lnd_nml
 ntiles                      =                          3         ! number of tiles
 nlev_snow                   =                          3         ! number of snow layers
 lmulti_snow                 =                      .FALSE.       ! .TRUE. for use of multi-layer snow model
 idiag_snowfrac              =                         20         ! type of snow-fraction diagnosis
 lsnowtile                   =                       .TRUE.       ! .TRUE.=consider snow-covered and snow-free separately
 itype_root                  =                          2         ! root density distribution
 itype_heatcond              =                          3         ! type of soil heat conductivity
 itype_lndtbl                =                          4         ! table for associating surface parameters
 itype_evsl                  =                          4         ! type of bare soil evaporation
 itype_canopy                =                          2         ! Type of canopy parameterization
 itype_snowevap              =                          3         ! Snow evap. in vegetated areas with add. variables for snow age and max. snow height
 itype_trvg                  =                          3         ! BATS scheme with add. prog. var. for integrated plant transpiration since sunrise
 cwimax_ml                   =                      5.e-4         ! scaling parameter for max. interception storage
 c_soil                      =                       1.25         ! surface area density of the evaporative soil surface
 c_soil_urb                  =                        0.5         ! same for urban areas
 lseaice                     =                      .TRUE.        ! .TRUE. for use of sea-ice model
 lprog_albsi                 =                      .TRUE.        ! prognostic seaice albedo
 llake                       =                      .TRUE.        ! .TRUE. for use of lake model
 sstice_mode                 =                          2         ! 2: SST is updated on a daily basis by climatological incre
/
&nonhydrostatic_nml
 iadv_rhotheta               =                          2         ! advection method for rho and rhotheta
 ivctype                     =                          2         ! type of vertical coordinate
 itime_scheme                =                          4         ! time integration scheme
 ndyn_substeps               =                          5         ! number of dynamics steps per fast-physics step
 exner_expol                 =                          0.333     ! temporal extrapolation of Exner function
 vwind_offctr                =                          0.2       ! off-centering in vertical wind solver
 damp_height                 =                      12500.0       ! height at which Rayleigh damping of vertical wind starts
 rayleigh_coeff              =                          5.0       ! Rayleigh damping coefficient
 divdamp_order               =                         24         ! order of divergence damping 
 divdamp_type                =                         32         ! type of divergence damping
 divdamp_fac                 =                          0.004     ! scaling factor for divergence damping
 l_open_ubc                  =                     .FALSE.        ! .TRUE.=use open upper boundary condition
 igradp_method               =                          3         ! discretization of horizontal pressure gradient
 l_zdiffu_t                  =                      .TRUE.        ! specifies computation of Smagorinsky temperature diffusion
 thslp_zdiffu                =                          0.02      ! slope threshold (temperature diffusion)
 thhgtd_zdiffu               =                        125.0       ! threshold of height difference (temperature diffusion)
 htop_moist_proc             =                      22500.0       ! max. height for moist physics
 hbot_qvsubstep              =                      16000.0       ! height above which QV is advected with substepping scheme
/
&dynamics_nml
 iequations                   = 3
 idiv_method                  = 1
 divavg_cntrwgt               = 0.50
 lcoriolis                    = .TRUE.
/
&diffusion_nml
 hdiff_order                  = 5
 itype_vn_diffu               = 1
 itype_t_diffu                = 2
 hdiff_efdt_ratio             = 24.0        ! 24.0 for R2B6; recommendation for R3B7: 30.0
 hdiff_smag_fac               = 0.025       ! 0.025for R2B6; recommendation for R3B7: 0.02
 lhdiff_vn                    = .TRUE.
 lhdiff_temp                  = .TRUE.
/
&interpol_nml
 nudge_zone_width             = 8  !-1 create nudge zone in grid
 lsq_high_ord                 = 2
 rbf_vec_scale_c              = 0.3,  0.1,  0.03
 rbf_vec_scale_v              = 0.4,  0.25, 0.07
 rbf_vec_scale_e              = 0.45, 0.37, 0.25
/
! nudging_nml: Parameters for the upper boundary nudging in the LAM ---------
&nudging_nml
 nudge_type                  =                          0         ! upper boundary nudging switched off
/
&gridref_nml
 denom_diffu_v                = 150.
/
&extpar_nml
 itopo                        = 1
 n_iter_smooth_topo           = 1
 heightdiff_threshold         = 2250.
/
&io_nml
 dt_checkpoint    = ${dt_checkpoint} ! [s] trigger new restart file
 lkeep_in_sync    = .true.
/
&output_nml
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT01H"
 file_interval    = "PT01H"
 include_last     = .FALSE.
 output_filename  = '3d_full_qmix'
 remap            = 0
 filename_format  = "<output_filename>_DOM<physdom>_<levtype>_<datetime2>"
 ml_varlist       = 'qc','qi','qr','qs','qg','qh'
 reg_lon_def      = 4.5,0.017,14.5
 reg_lat_def      = 47.5,0.011,54.5
 filetype         = 5
/
! &output_nml
!  output_start     = "${start_date}"
!  output_end       = "${end_date}"
!  output_interval  = "PT01H"
!  file_interval    = "PT01H"
!  include_last     = .FALSE.
!  output_filename  = '3d_full_qnum'
!  remap            = 0
!  filename_format  = "<output_filename>_DOM<physdom>_<levtype>_<datetime2>"
!  ml_varlist       = 'qnc','qni','qnr','qns','qng','qnh'
!  reg_lon_def      = 4.5,0.017,14.5
!  reg_lat_def      = 47.5,0.011,54.5
!  filetype         = 5
! /
&output_nml
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT01H"
 file_interval    = "PT01H"
 include_last     = .FALSE.
 output_filename  = '3d_full_base'
 remap            = 0
 filename_format  = "<output_filename>_DOM<physdom>_<levtype>_<datetime2>"
 ml_varlist       = 'u','v','w','clc','qv','temp','pres','theta_v'
 reg_lon_def      = 4.5,0.017,14.5
 reg_lat_def      = 47.5,0.011,54.5
 filetype         = 5
/
&output_nml
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT01H"
 file_interval    = "PT01H"
 include_last     = .FALSE.
 output_filename  = '3d_full_tend'
 remap            = 0
 filename_format  = "<output_filename>_DOM<physdom>_<levtype>_<datetime2>"
 ml_varlist       = 'ddt_temp_radlw','ddt_temp_radsw','ddt_temp_drag','ddt_temp_dyn',
                    'ddt_temp_gscp','ddt_temp_pconv','ddt_temp_turb',
                    'ddt_qv_conv','ddt_qv_gscp','ddt_qv_turb'
 reg_lon_def      = 4.5,0.017,14.5
 reg_lat_def      = 47.5,0.011,54.5
 filetype         = 5
/
&
&output_nml
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT01H"
 file_interval    = "PT01H"
 include_last     = .FALSE.
 output_filename  = '3d_full_aux'
 remap            = 0
 filename_format  = "<output_filename>_DOM<physdom>_<levtype>_<datetime2>"
 ml_varlist       = 'tkvh'
 reg_lon_def      = 4.5,0.017,14.5
 reg_lat_def      = 47.5,0.011,54.5
 filetype         = 5
/
&output_nml
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "P01D"
 file_interval    = "P01D"
 include_last     = .FALSE.
 output_filename  = '3d_full_geo'
 remap            = 0
 filename_format  = "<output_filename>_DOM<physdom>_<levtype>_<datetime2>"
 ml_varlist       = 'z_ifc', 'z_mc', 'fr_land'
 reg_lon_def      = 4.5,0.017,14.5
 reg_lat_def      = 47.5,0.011,54.5
 filetype         = 5
/
&output_nml
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT05M"
 file_interval    = "PT01H"
 include_last     = .TRUE.
 output_filename  = '2d_cloud'
 filename_format  = "<output_filename>_DOM<physdom>_<levtype>_<datetime2>"
 ml_varlist       = 'tqv_dia','tqc_dia','tqi_dia','clct','rain_gsp_rate','clch','clcm','clcl',
                    'cape', 'cape_ml', 'cin_ml', 'rain_con_rate', 'prec_con', 'prec_gsp'
 filetype         = 5
/
&output_nml
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT05M"
 file_interval    = "PT01H"
 include_last     = .TRUE.
 output_filename  = '2d_rad'
 filename_format  = "<output_filename>_DOM<physdom>_<levtype>_<datetime2>"
 ml_varlist       = 'sob_s','swflx_dn_clr','swflx_dn','sobclr_s', 'sodifd_s', 'sou_s',
                    'thb_s','thu_s',
                    'sob_t','sod_t','thb_t'
 filetype         = 5
/
&output_nml
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT05M"
 file_interval    = "PT01H"
 include_last     = .TRUE.
 output_filename  = '2d_surface'
 filename_format  = "<output_filename>_DOM<physdom>_<levtype>_<datetime2>"
 ml_varlist       = 'lhfl_s','shfl_s','umfl_s','vmfl_s','t_g','pres_sfc','qv_s','t_2m','qv_2m',
                    'rh_2m','u_10m','v_10m','w_so','t_so','runoff_s','t_s','t_seasfc'
                    'tcm','tch'
 filetype         = 5
/
&extpar_nml
 itopo          = 1
 n_iter_smooth_topo = 0
 heightdiff_threshold = 3000.
/
EOF
#
#-----------------------------------------------------------------------------
# add standard atmo_non-hydrostatic_files
. ${thisdir}/add_required_atmo_non-hydrostatic_files
#-----------------------------------------------------------------------------
#!/bin/ksh
#=============================================================================
#
# This section of the run script prepares and starts the model integration. 
#
# MODEL and START must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
final_status_file=${basedir}/run/${job_name}.final_status
rm -f ${final_status_file}
#-----------------------------------------------------------------------------
#
# directories definition
#
RUNSCRIPTDIR=${basedir}/run
if [ x$grids_folder = x ] ; then
   HGRIDDIR=${basedir}/grids
else
   HGRIDDIR=$grids_folder
fi

# experiment directory, with plenty of space, create if new
EXPDIR=${basedir}/experiments/${EXPNAME}
if [ ! -d ${EXPDIR} ] ;  then
  mkdir -p ${EXPDIR}
fi
#
ls -ld ${EXPDIR}
if [ ! -d ${EXPDIR} ] ;  then
    mkdir ${EXPDIR}
#else
#   rm -rf ${EXPDIR}
#   mkdir  ${EXPDIR}
fi
ls -ld ${EXPDIR}
check_error $? "${EXPDIR} does not exist?"

cd ${EXPDIR}

#-----------------------------------------------------------------------------
final_status_file=${RUNSCRIPTDIR}/${job_name}.final_status
rm -f ${final_status_file}

#-----------------------------------------------------------------------------
# set up the model lists if they do not exist
# this works for single model runs
# for coupled runs the lists should be declared explicilty
if [ x$namelist_list = x ]; then
#  minrank_list=(        0           )
#  maxrank_list=(     65535          )
#  incrank_list=(        1           )
  minrank_list[0]=0
  maxrank_list[0]=65535
  incrank_list[0]=1
  if [ x$atmo_namelist != x ]; then
    # this is the atmo model
    namelist_list[0]="$atmo_namelist"
    modelname_list[0]="atmo"
    modeltype_list[0]=1
    run_atmo="true"
  elif [ x$ocean_namelist != x ]; then
    # this is the ocean model
    namelist_list[0]="$ocean_namelist"
    modelname_list[0]="oce"
    modeltype_list[0]=2
  elif [ x$psrad_namelist != x ]; then
    # this is the psrad model
    namelist_list[0]="$psrad_namelist"
    modelname_list[0]="psrad"
    modeltype_list[0]=3
  elif [ x$hamocc_namelist != x ]; then
    # this is the hamocc model
    namelist_list[0]="$hamocc_namelist"
    modelname_list[0]="hamocc"
    modeltype_list[0]=4
  elif [ x$testbed_namelist != x ]; then
    # this is the testbed model
    namelist_list[0]="$testbed_namelist"
    modelname_list[0]="testbed"
    modeltype_list[0]=99
  else
    check_error 1 "No namelist is defined"
  fi 
fi

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# set some default values and derive some run parameteres
restart=${restart:=".false."}
restartSemaphoreFilename='isRestartRun.sem'
#AUTOMATIC_RESTART_SETUP:
if [ -f ${restartSemaphoreFilename} ]; then
  restart=.true.
  #  do not delete switch-file, to enable restart after unintended abort
  #[[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi
#END AUTOMATIC_RESTART_SETUP
#
# wait 5min to let GPFS finish the write operations
if [ "x$restart" != 'x.false.' -a "x$submit" != 'x' ]; then
  if [ x$(df -T ${EXPDIR} | cut -d ' ' -f 2) = gpfs ]; then
    sleep 10;
  fi
fi
# fill some checks

run_atmo=${run_atmo="false"}
if [ x$atmo_namelist != x ]; then
  run_atmo="true"
fi
run_jsbach=${run_jsbach="false"}
run_ocean=${run_ocean="false"}
if [ x$ocean_namelist != x ]; then
  run_ocean="true"
fi
run_psrad=${run_psrad="false"}
if [ x$psrad_namelist != x ]; then
  run_psrad="true"
fi
run_hamocc=${run_hamocc="false"}
if [ x$hamocc_namelist != x ]; then
  run_hamocc="true"
fi

#-----------------------------------------------------------------------------
# add grids to required files
all_grids="${atmo_dyn_grids} ${atmo_rad_grids} ${ocean_grids}"
for gridfile in ${all_grids}; do
  #
  gridfile=${gridfile//\'/} # strip all ' in case ' is used to delimit the grid names
  gridfile=${gridfile//\"/} # strip all " in case " is used to delimit the grid names
  gridfile=${gridfile//\,/} # strip all , in case , is used to separate the grid names
  #
  grfinfofile=${gridfile%.nc}-grfinfo.nc
  #
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  add_link_file ${HGRIDDIR}/${gridfile} ./
  if [ -f ${HGRIDDIR}/${grfinfofile} ]; then    
    add_link_file ${HGRIDDIR}/${grfinfofile} ./
  fi
done
#-----------------------------------------------------------------------------
# print_required_files
copy_required_files
link_required_files


#-----------------------------------------------------------------------------
# get restart files

if  [ x$restart_atmo_from != "x" ] ; then
  rm -f restart_atm_DOM01.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} ${EXPDIR}/restart_atm_DOM01.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
  ln -s cp_restart_atm.nc restart_atm_DOM01.nc
  restart=".true."
fi
if  [ x$restart_ocean_from != "x" ] ; then
  rm -f restart_oce.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} ${EXPDIR}/restart_oce.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} cp_restart_oce_DOM01.nc
  ln -s cp_restart_oce_DOM01.nc restart_oce_DOM01.nc
  restart=".true."
fi
#-----------------------------------------------------------------------------


read_restart_namelists=${read_restart_namelists:=".true."}

#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

#-----------------------------------------------------------------------------
# create master_namelist
master_namelist=icon_master.namelist
if [ x$end_date = x ]; then
cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
/
&master_time_control_nml
 experimentStartDate  = "$start_date" 
 restartTimeIntval    = "$restart_interval" 
 checkpointTimeIntval = "$checkpoint_interval" 
/
&time_nml
 is_relative_time = .false.
/
EOF
else
if [ x$calendar = x ]; then
  calendar='proleptic gregorian'
  calendar_type=1
else
  calendar=$calendar
  calendar_type=$calendar_type
fi
cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
 read_restart_namelists = $read_restart_namelists
/
&master_time_control_nml
 calendar             = "$calendar"
 checkpointTimeIntval = "$checkpoint_interval" 
 restartTimeIntval    = "$restart_interval" 
 experimentStartDate  = "$start_date" 
 experimentStopDate   = "$end_date" 
/
&time_nml
 is_relative_time = .false.
/
EOF
fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{
    
  model_namelist_filename="$1"
  model_name=$2
  model_type=$3
  model_min_rank=$4
  model_max_rank=$5
  model_inc_rank=$6
  
cat >> $master_namelist << EOF
&master_model_nml
  model_name="$model_name"
  model_namelist_filename="$model_namelist_filename"
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
/
EOF

#-----------
#get namelist
  if [ -f ${RUNSCRIPTDIR}/$model_namelist_filename ] ; then
    mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}
    check_error $? "mv -f ${RUNSCRIPTDIR}/$model_namelist_filename"
  else
    check_error 1 "${RUNSCRIPTDIR}/$model_namelist_filename does not exist"
  fi  

}
#-----------------------------------------------------------------------------


no_of_models=${#namelist_list[*]}
echo "no_of_models=$no_of_models"

j=0
while [ $j -lt ${no_of_models} ]
do
  add_component_to_master_namelist "${namelist_list[$j]}" "${modelname_list[$j]}" ${modeltype_list[$j]} ${minrank_list[$j]} ${maxrank_list[$j]} ${incrank_list[$j]}
  j=`expr ${j} + 1`
done

#-----------------------------------------------------------------------------
# Add JSBACH part to master_namelist

if [[ $run_jsbach == @(yes|true) ]]; then
  cat >> $master_namelist << EOF
&jsb_control_nml
 is_standalone      = .false.
 restart_jsbach     = .false.
 debug_level        = 0
 timer_level        = 0
/
EOF
#
if [[ -n ${atmo_dyn_grids} ]]; then
  set -A gridfiles $atmo_dyn_grids
  no_of_domains=${#gridfiles[*]}
else
  no_of_domains=1
fi
echo "no_of_domains=$no_of_domains"
domain=""
domain_suffix=""
j=1
while [ $j -le ${no_of_domains} ]
do
  if [[ $no_of_domains -gt 1 ]]; then
    # no_of_domains < 10 !
    domain=" DOM0${j}"
    domain_suffix="_d${j}"
  fi
  cat >> $master_namelist << EOF
&jsb_model_nml
 model_id = $j
 model_name = "JSBACH${domain}"
 model_shortname = "jsb${domain_suffix}"
 model_description = 'JSBACH land surface model'
 model_namelist_filename = "${lnd_namelist}${domain_suffix}"
/
EOF
  if [[ -f ${RUNSCRIPTDIR}/NAMELIST_${EXPNAME}_lnd${domain_suffix} && -f ${EXPDIR}/NAMELIST_${EXPNAME}_lnd${domain_suffix} ]] ; then
    # namelist file has already been copied to expdir by copy_required_files above
    rm ${RUNSCRIPTDIR}/NAMELIST_${EXPNAME}_lnd${domain_suffix}
    check_error $? "rm ${RUNSCRIPTDIR}/NAMELIST_${EXPNAME}_lnd${domain_suffix}"
  else
    check_error 1 "${RUNSCRIPTDIR}/NAMELIST_${EXPNAME}_lnd${domain_suffix} does not exist"
  fi
  j=`expr ${j} + 1`
done
fi
#
#  get model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#
ldd -v ${MODEL}
#
#-----------------------------------------------------------------------------
#
# start experiment
#

rm -f finish.status
#
date
${START} ${MODEL} # > out.txt 2>&1
date
#
if [ -r finish.status ] ; then
  check_final_status 0 "${START} ${MODEL}"
else
  check_final_status -1 "${START} ${MODEL}"
fi
#
#-----------------------------------------------------------------------------
#
finish_status=`cat finish.status`
echo $finish_status
echo "============================"
echo "Script run successfully: $finish_status"
echo "============================"

#-----------------------------------------------------------------------------
# rm output_schedule_steps*
#-----------------------------------------------------------------------------
if [[ "x$use_hamocc" = "xyes" ]]; then
# store HAMOCC log file
strg="$(ls -rt ${EXPNAME}_hamocc_EU*.nc* | tail -1 )"
prefx="${EXPNAME}_hamocc_EU_tendencies"
foo=${strg##${prefx}}
foo=${foo%%.*}
bgcout_file="bgcout_${foo}"
mv bgcout $bgcout_file
fi
#-----------------------------------------------------------------------------
namelist_list=""
#-----------------------------------------------------------------------------
# check if we have to restart, ie resubmit
#   Note: this is a different mechanism from checking the restart
if [ $finish_status = "RESTART" ] ; then
  echo "restart next experiment..."
  this_script="${RUNSCRIPTDIR}/${job_name}"
  echo 'this_script: ' "$this_script"
  touch ${restartSemaphoreFilename}
  cd ${RUNSCRIPTDIR}
  ${submit} $this_script $run_param_0
else
  [[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi

#-----------------------------------------------------------------------------
# automatic call/submission of post processing if available
if [ "x${autoPostProcessing}" = "xtrue" ]; then
  # check if there is a postprocessing is available
  cd ${RUNSCRIPTDIR}
  targetPostProcessingScript="./post.${EXPNAME}.run"
  [[ -x $targetPostProcessingScript ]] && ${submit} ${targetPostProcessingScript}
  cd -
fi

#-----------------------------------------------------------------------------

cd $RUNSCRIPTDIR

#-----------------------------------------------------------------------------

	
# exit 0
#
# vim:ft=sh
#-----------------------------------------------------------------------------
